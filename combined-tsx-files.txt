src/common/components/Album.tsx```typescript
import React from "react"
import { StyleSheet, Text, View } from "react-native"
import { colors } from "../theme"
import Cover from "./Cover"
import CoverBlank from "./CoverBlank"
import { TouchableOpacity } from "react-native-gesture-handler"
import { SavedAlbumType } from "../../redux/slices"

const Album = ({
  album,
  onPlaylistPressed,
}: {
  album: SavedAlbumType
  onPlaylistPressed: (id: string) => void
}) => {
  return (
    <TouchableOpacity
      onPress={() => {
        onPlaylistPressed(album.id)
      }}
      style={styles.flatListContainer}>
      {album.url ? (
        <Cover uri={album.url} />
      ) : (
        <CoverBlank styles={[styles.cover]} />
      )}
      <View style={styles.rowText}>
        <Text style={styles.albumTitle} numberOfLines={1}>
          {album.name}
        </Text>
        <Text style={styles.albumOwner}>by {album.owner}</Text>
      </View>
    </TouchableOpacity>
  )
}

const styles = StyleSheet.create({
  flatListContainer: {
    marginLeft: 15,
    marginVertical: 10,
    flex: 1,
    flexDirection: "row",
    maxWidth: "77%",
  },
  albumTitle: {
    color: colors.white,
    textAlignVertical: "center",
    fontSize: 16,
  },
  albumOwner: {
    color: colors.grey,
    textAlignVertical: "center",
  },
  cover: {
    height: 50,
    width: 50,
  },
  lineBreak: { flexBasis: "100%" },
  rowText: {
    marginLeft: 10,
    justifyContent: "center",
  },
  favRowText: {
    marginLeft: 10,
    justifyContent: "center",
    marginBottom: 15,
  },
})

export default Album
```
src/common/components/Artist.tsx```typescript
import React from "react"
import { View, Text, StyleSheet } from "react-native"
import Cover from "./Cover"
import CoverBlank from "./CoverBlank"
import { colors } from "../theme"
import { AlbumType } from "../../services/network/models/spotify/SpotifyCommon"
import { TouchableOpacity } from "react-native-gesture-handler"

const Artist = ({
  artist,
  onArtistPressed,
}: {
  artist: AlbumType
  onArtistPressed: (id: string | undefined) => void
}) => {
  return (
    <TouchableOpacity
      onPress={() => onArtistPressed(artist.id)}
      style={styles.flatListContainer}>
      {artist.imageURL ? (
        <Cover uri={artist.imageURL} />
      ) : (
        <CoverBlank styles={[styles.cover]} />
      )}
      <View style={styles.rowText}>
        <Text style={styles.artistTitle} numberOfLines={1}>
          {artist.name}
        </Text>
      </View>
    </TouchableOpacity>
  )
}

const styles = StyleSheet.create({
  flatListContainer: {
    marginLeft: 15,
    marginVertical: 10,
    flex: 1,
    flexDirection: "row",
    maxWidth: "77%",
  },
  artistTitle: {
    color: colors.white,
    textAlignVertical: "center",
    fontSize: 16,
  },
  artistOwner: {
    color: colors.grey,
    textAlignVertical: "center",
  },
  cover: {
    height: 50,
    width: 50,
  },
  lineBreak: { flexBasis: "100%" },
  rowText: {
    marginLeft: 10,
    justifyContent: "center",
  },
  favRowText: {
    marginLeft: 10,
    justifyContent: "center",
    marginBottom: 15,
  },
})

export default Artist
```
src/common/components/ArtistCover.tsx```typescript
import React from "react"
import { Text, TouchableOpacity, View } from "react-native"
import FastImage from "react-native-fast-image"
import Animated from "react-native-reanimated"
import { AlbumType } from "../../services/network/models/spotify/SpotifyCommon"
import { albumDimensions, styles } from "../../features/home/styles"
import UIHelper from "../helpers/UIHelper"

const ArtistCover = ({
  album: item,
  onPress,
  coverShape,
}: {
  album: AlbumType
  onPress: (id: string) => void
  coverShape: "CIRCLE" | "SQUARE"
}) => {
  const scale = new Animated.Value(1)
  return (
    <Animated.View style={{ transform: [{ scale }] }}>
      <TouchableOpacity
        onPressIn={() =>
          Animated.timing(scale, UIHelper.btnScaleAnim.in).start()
        }
        onPressOut={() =>
          Animated.timing(scale, UIHelper.btnScaleAnim.out).start()
        }
        onPress={() => onPress(item.id)}
        style={{ marginHorizontal: 8, flexDirection: "column" }}>
        <FastImage
          source={{
            uri: (item && item.imageURL) || "",
          }}
          style={{
            height: albumDimensions.ALBUM_DIMEN_RECENT,
            width: albumDimensions.ALBUM_DIMEN_RECENT,
            borderRadius: coverShape === "CIRCLE" ? 80 : 0,
          }}
        />
        <View
          style={{
            width: albumDimensions.ALBUM_DIMEN_RECENT,
            marginTop: 5,
            alignSelf: "center",
          }}>
          <Text
            numberOfLines={2}
            style={[
              styles.centeredText,
              {
                fontSize: 13,
                textAlign: "center",
              },
            ]}>
            {item && item.name}
          </Text>
        </View>
      </TouchableOpacity>
    </Animated.View>
  )
}

export default ArtistCover
```
src/common/components/BackBtn.tsx```typescript
import React from "react"
import { StyleSheet, TextStyle, View, ViewStyle } from "react-native"
import Icon from "react-native-vector-icons/MaterialCommunityIcons"
import { colors } from "../theme"

const BackBtn = ({
  goBack,
  viewStyle,
  textStyle,
}: {
  goBack: () => void
  viewStyle?: ViewStyle
  textStyle?: TextStyle
}) => {
  return (
    <View style={[styles.backContainer, viewStyle]}>
      <Icon
        onPress={goBack}
        name="arrow-left"
        size={28}
        style={[
          {
            color: colors.white,
            textAlign: "center",
            textAlignVertical: "center",
          },
          textStyle,
        ]}
      />
    </View>
  )
}
const styles = StyleSheet.create({
  backContainer: {
    position: "absolute",
    left: 14,
    top: 10,
    zIndex: 10,
    justifyContent: "center",
    alignItems: "center",
    height: 42,
    width: 42,
  },
})

export default BackBtn
```
src/common/components/Cover.tsx```typescript
import React from "react";
import { StyleSheet } from "react-native";
import FastImage from "react-native-fast-image";

const Cover = ({ uri }: { uri: string }) => {
  return (
    <FastImage
      source={{
        uri,
      }}
      style={styles.cover}
    />
  );
};

const styles = StyleSheet.create({
  cover: {
    height: 50,
    width: 50,
  },
});

export default Cover;
```
src/common/components/CoverBlank.tsx```typescript
import React from "react"
import { ImageStyle } from "react-native"
import FastImage from "react-native-fast-image"
import { coverImages } from "../theme/coverImages"

export const CoverBlank = ({ styles }: { styles: ImageStyle[] }) => (
  <FastImage source={coverImages.noPlaylist} style={styles} />
)

export default CoverBlank
```
src/common/components/CrossIcon.tsx```typescript
import React from "react";
import { StyleProp, TextStyle } from "react-native";
import MaterialIcon from "react-native-vector-icons/MaterialCommunityIcons";

const CrossIcon = ({
  handlePress,
  color,
  iconStyle,
  size,
}: {
  handlePress: () => void;
  color: string;
  size: number;
  iconStyle: StyleProp<TextStyle>;
}) => {
  return (
    <MaterialIcon
      onPress={handlePress}
      style={iconStyle}
      name="close"
      size={size}
      color={color}
    />
  );
};

export default CrossIcon;
```
src/common/components/DetailsCover.tsx```typescript
import React from "react"
import { Text, View, StyleSheet } from "react-native"
import FastImage from "react-native-fast-image"
import Animated from "react-native-reanimated"
import { colors } from "../theme"

const DetailsCover = ({
  offsetY,
  artistName,
  name,
  imageUrl,
  coverShape,
  username,
}: {
  offsetY: Animated.Value<number>
  name: string | undefined
  artistName: string | null | undefined
  imageUrl: string | undefined
  coverShape: "CIRCLE" | "SQUARE"
  username: string | undefined
}) => {
  const scaleAnim = offsetY.interpolate({
    inputRange: [0, 250],
    outputRange: [1, 0.9],
    extrapolate: Animated.Extrapolate.CLAMP,
  })

  const opacityAnim = offsetY.interpolate({
    inputRange: [0, 300],
    outputRange: [1, 0],
    extrapolate: Animated.Extrapolate.CLAMP,
  })

  return (
    <Animated.View
      style={[
        styles.container,
        {
          opacity: opacityAnim,
          transform: [{ scaleX: scaleAnim }, { scaleY: scaleAnim }],
        },
      ]}>
      <FastImage
        style={[
          styles.cover,
          { borderRadius: coverShape === "CIRCLE" ? 83 : 0 },
        ]}
        source={{ uri: imageUrl }}
      />
      <View style={styles.textContainer}>
        <Text
          numberOfLines={2}
          style={[
            styles.title,
            {
              fontSize: name && name.length > 36 ? 12 : 18,
              marginTop: coverShape === "SQUARE" ? 0 : 10,
            },
          ]}>
          {name}
        </Text>
        {artistName && coverShape === "SQUARE" && (
          <Text style={styles.artist}>
            by {artistName === username ? "you" : artistName}
          </Text>
        )}
      </View>
    </Animated.View>
  )
}

const styles = StyleSheet.create({
  container: {
    justifyContent: "center",
    alignItems: "center",
  },
  cover: {
    height: 165,
    width: 165,
  },
  textContainer: { marginTop: 20, alignItems: "center" },
  title: {
    color: colors.white,
    fontSize: 18,
    fontWeight: "bold",
    letterSpacing: 0.6,
    textAlign: "center",
    marginHorizontal: 50,
  },
  artist: {
    marginTop: 5,
    color: colors.grey,
    fontSize: 14,
    letterSpacing: 0.6,
  },
})

export default DetailsCover
```
src/common/components/DotsView.tsx```typescript
import React from "react"
import { View, StyleSheet, ViewStyle } from "react-native"
import { colors } from "../theme"
import { Color } from "csstype"

const DotsView = ({
  color,
  containerStyle,
}: {
  color?: Color
  containerStyle?: ViewStyle
}) => {
  const bgColor = color ? color : colors.grey

  return (
    <View style={[{ flexDirection: "column" }, containerStyle]}>
      <View
        style={[
          styles.dot,
          {
            marginBottom: 5.5,
            backgroundColor: bgColor,
          },
        ]}
      />
      <View
        style={[
          styles.dot,
          {
            marginBottom: 5.5,
            backgroundColor: bgColor,
          },
        ]}
      />
      <View
        style={[
          styles.dot,
          {
            backgroundColor: bgColor,
          },
        ]}
      />
    </View>
  )
}

const styles = StyleSheet.create({
  dot: {
    height: 2.5,
    width: 2.5,
    borderRadius: 2,
  },
})

export default DotsView
```
src/common/components/DownloadHeader.tsx```typescript
import React from "react"
import { StyleSheet, Switch, Text, View } from "react-native"
import { colors } from "../theme"

const DownloadHeader = () => (
  <View style={styles.container}>
    <Text style={styles.download}>Download</Text>
    <Switch
      value={false}
      style={{ marginRight: 10 }}
      onValueChange={() => {
        return
      }}
      thumbColor={colors.grey}
      trackColor={{ false: colors.darkerGrey, true: "green" }}
    />
  </View>
)

const styles = StyleSheet.create({
  container: {
    flexDirection: "row",
    marginBottom: 10,
  },
  download: {
    flex: 1,
    color: colors.darkWhite,
    fontSize: 16,
    fontWeight: "bold",
    letterSpacing: 1,
  },
})

export default DownloadHeader
```
src/common/components/GreenIndicator.tsx```typescript
import React from "react"
import { ActivityIndicator, View } from "react-native"
import { colors } from "../theme"

const GreenIndicator = () => {
  return (
    <View
      style={{
        width: "100%",
        height: "100%",
        justifyContent: "center",
        top: 0,
        left: 0,
        backgroundColor: colors.background,
      }}>
      <ActivityIndicator size={60} color={colors.green} />
    </View>
  )
}

export default GreenIndicator
```
src/common/components/ListOfAlbums.tsx```typescript
import React from "react"
import { FlatList, View } from "react-native"
import { colors } from "../theme"
import Album from "./Album"
import { SavedAlbumType } from "../../redux/slices"
import { PLAYER_HEIGHT } from "../../features/player/StickyPlayer"

const ListOfAlbums = ({
  currentUserAlbums,
  onPlaylistPressed,
}: {
  currentUserAlbums: SavedAlbumType[]
  onPlaylistPressed: (id: string) => void
}) => {
  return (
    <View
      style={{
        flex: 1,
        backgroundColor: colors.background,
      }}>
      <FlatList
        contentContainerStyle={{ paddingBottom: PLAYER_HEIGHT + 10 }}
        data={currentUserAlbums}
        renderItem={({ item }) => (
          <Album album={item} onPlaylistPressed={onPlaylistPressed} />
        )}
        keyExtractor={(_, index) => index.toString()}
      />
    </View>
  )
}

export default ListOfAlbums
```
src/common/components/ListOfArtists.tsx```typescript
import React from "react"
import { FlatList, View } from "react-native"
import { AlbumType } from "../../services/network/models/spotify/SpotifyCommon"
import { colors } from "../theme"
import Artist from "./Artist"
import { PLAYER_HEIGHT } from "../../features/player/StickyPlayer"

const ListOfArtists = ({
  currentUserArtists,
  onArtistPressed,
}: {
  currentUserArtists: AlbumType[]
  onArtistPressed: (id: string | undefined) => void
}) => {
  return (
    <View
      style={{
        flex: 1,
        backgroundColor: colors.background,
      }}>
      <FlatList
        contentContainerStyle={{ paddingBottom: PLAYER_HEIGHT + 10 }}
        data={currentUserArtists}
        renderItem={({ item }) => (
          <Artist artist={item} onArtistPressed={onArtistPressed} />
        )}
        keyExtractor={(_, index) => index.toString()}
      />
    </View>
  )
}

export default ListOfArtists
```
src/common/components/ListOfPlaylists.tsx```typescript
import React from "react"
import { FlatList, View } from "react-native"
import { TouchableOpacity } from "react-native-gesture-handler"
import PlaylistRowFav from "../../features/favorites/favorite-playlists/components/PlaylistFavRow"
import { colors } from "../theme"
import Playlist, { playlistStyle } from "./Playlist"
import { SavedPlaylistsType } from "../../redux/slices"
import { PLAYER_HEIGHT } from "../../features/player/StickyPlayer"

const ListOfPlaylists = ({
  currentUserPlaylists,
  savedTracksCount,
  username,
  onPlaylistPressed,
  onFavSongsPressed,
}: {
  currentUserPlaylists: SavedPlaylistsType[]
  savedTracksCount: number | null
  username: string
  onPlaylistPressed: (id: string) => void
  onFavSongsPressed: () => void
}) => {
  return (
    <View
      style={{
        flex: 1,
        backgroundColor: colors.background,
      }}>
      {Array.isArray(currentUserPlaylists) && (
        <FlatList
          contentContainerStyle={{ paddingBottom: PLAYER_HEIGHT + 10 }}
          ListHeaderComponent={
            <TouchableOpacity
              onPress={onFavSongsPressed}
              style={{
                marginLeft: playlistStyle.left,
                marginVertical: playlistStyle.vertical,
                marginBottom: -playlistStyle.vertical * 2,
              }}>
              <PlaylistRowFav savedTracksCount={savedTracksCount} />
            </TouchableOpacity>
          }
          data={currentUserPlaylists}
          renderItem={({ item }) => (
            <Playlist
              {...{
                item,
                username,
                savedTracksCount: savedTracksCount,
                onPlaylistPressed,
              }}
            />
          )}
          keyExtractor={(_, index) => index.toString()}
        />
      )}
    </View>
  )
}
export default ListOfPlaylists
```
src/common/components/ListOfTracks.tsx```typescript
import React from "react"
import { View } from "react-native"
import { PlaylistDetailsType } from "../../redux/slices"
import { colors } from "../theme"
import DownloadHeader from "./DownloadHeader"
import Track from "./Track"

const ListOfTracks = ({
  playlistDetails,
  showDownload,
}: {
  playlistDetails: PlaylistDetailsType
  showDownload: boolean
}) => (
  <View
    style={{
      backgroundColor: colors.background,
    }}>
    <View
      style={{
        flex: 1,
        marginHorizontal: 10,
      }}>
      {showDownload && <DownloadHeader />}
      {Array.isArray(playlistDetails.tracks) &&
        playlistDetails.tracks.map((track, index) => (
          <Track key={index} title={track.name} artist={track.artistName} />
        ))}
    </View>
  </View>
)

export default ListOfTracks
```
src/common/components/LoadingView.tsx```typescript
import React from "react"
import { ActivityIndicator, ViewStyle } from "react-native"
import { colors } from "../theme"

export const LoadingView = ({ viewStyle }: { viewStyle?: ViewStyle }) => (
  <ActivityIndicator
    animating
    size={50}
    color={colors.green}
    style={[
      { flex: 1, justifyContent: "center", alignItems: "center" },
      viewStyle,
    ]}
  />
)
export default LoadingView
```
src/common/components/Playlist.tsx```typescript
import React from "react"
import { View, Text, StyleSheet } from "react-native"
import Cover from "./Cover"
import CoverBlank from "./CoverBlank"
import { colors } from "../theme"
import { TouchableOpacity } from "react-native-gesture-handler"
import { SavedPlaylistsType } from "../../redux/slices"

export const playlistStyle = {
  vertical: 6.5,
  left: 15,
  rowTextLeft: 10,
  titleFontSize: 16,
}

const Playlist = ({
  item,
  username,
  onPlaylistPressed,
}: {
  item: SavedPlaylistsType
  username: string
  onPlaylistPressed: (id: string) => void
}) => (
  <TouchableOpacity
    onPress={() => onPlaylistPressed(item.id)}
    style={styles.item}>
    {item.url ? (
      <Cover uri={item.url} />
    ) : (
      <CoverBlank styles={[styles.cover]} />
    )}
    <View style={styles.rowText}>
      <Text style={styles.playlistTitle} numberOfLines={1}>
        {item.name}
      </Text>
      <Text style={styles.playlistOwner}>
        by {item.owner === username ? "you" : item.owner}
      </Text>
    </View>
  </TouchableOpacity>
)

const styles = StyleSheet.create({
  item: {
    marginLeft: playlistStyle.left,
    marginVertical: playlistStyle.vertical,
    flex: 1,
    flexDirection: "row",
  },
  playlistTitle: {
    color: colors.white,
    textAlignVertical: "center",
    fontSize: playlistStyle.titleFontSize,
    maxWidth: "80%",
  },
  playlistOwner: {
    color: colors.grey,
    textAlignVertical: "center",
  },
  cover: {
    height: 50,
    width: 50,
  },
  rowText: {
    marginLeft: playlistStyle.rowTextLeft,
    justifyContent: "center",
    width: "100%",
  },
})

export default Playlist
```
src/common/components/PlaylistHeaderControl.tsx```typescript
import React, { useEffect, useState } from "react"
import { SafeAreaView, StyleSheet, ToastAndroid, View } from "react-native"
import { TouchableWithoutFeedback } from "react-native-gesture-handler"
import Animated, { Value } from "react-native-reanimated"
import Icon from "react-native-vector-icons/MaterialCommunityIcons"
import UIHelper from "../helpers/UIHelper"
import { ItemType, SpotifyLibraryManager } from "../hooks/useLibraryManager"
import { colors } from "../theme"
import BackBtn from "./BackBtn"
import DotsView from "./DotsView"
import { useSelector } from "react-redux"
import { RootStoreType } from "../../redux/rootReducer"

export const HEADER_HEIGHT = 42

const heartScale = new Value(1)

interface Props {
  goBack: () => void
  isLoading: boolean
  id: string | undefined | null
  itemType: ItemType | undefined
}

const PlaylistHeaderControl = ({ goBack, isLoading, id, itemType }: Props) => {
  const {
    getItemSavedOrFollowedState,
    saveItem,
    removeItem,
  } = SpotifyLibraryManager()
  const [isSaved, setIsSaved] = useState<boolean | undefined>(undefined)
  const userId = useSelector(
    (state: RootStoreType) => state.userReducer.profile?.id,
  )

  useEffect(() => {
    ;(async () => {
      if (typeof isSaved === "undefined" && id && userId && itemType) {
        let result
        if (itemType === "PLAYLIST") {
          result = await getItemSavedOrFollowedState(id, itemType, userId)
        } else {
          result = await getItemSavedOrFollowedState(id, itemType)
        }
        setIsSaved(Boolean(result))
      }
    })()
  }, [getItemSavedOrFollowedState, id, itemType, isSaved, userId])

  const handleSave = async () => {
    if (id && !isSaved && itemType) {
      const success = await saveItem(id, itemType)
      success && setIsSaved(true)
    }
  }

  const handleRemove = async () => {
    if (id && isSaved && itemType) {
      const success = await removeItem(id, itemType)
      success && setIsSaved(false)
    }
  }

  return (
    <SafeAreaView style={styles.container}>
      <BackBtn goBack={goBack} />
      {!isLoading && (
        <>
          <Animated.View
            style={[
              styles.heartContainer,
              { transform: [{ scale: heartScale }] },
            ]}>
            <TouchableWithoutFeedback
              onPress={isSaved ? handleRemove : handleSave}
              onPressIn={() =>
                Animated.timing(heartScale, UIHelper.heartScaleAnim.in).start()
              }
              onPressOut={() =>
                Animated.timing(heartScale, UIHelper.heartScaleAnim.out).start()
              }>
              <Icon
                name={
                  id === null ? "heart" : isSaved ? "heart" : "heart-outline"
                }
                size={26}
                style={{
                  color:
                    id === null
                      ? colors.green
                      : isSaved
                      ? colors.green
                      : colors.white,
                }}
              />
            </TouchableWithoutFeedback>
          </Animated.View>
          <View style={styles.dotsContainer}>
            <TouchableWithoutFeedback
              onPress={() => {
                ToastAndroid.show("Dots!", ToastAndroid.SHORT)
              }}>
              <DotsView color={colors.white} />
            </TouchableWithoutFeedback>
          </View>
        </>
      )}
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    zIndex: 10,
    flexDirection: "row",
    alignItems: "center",
    top: 0,
    height: HEADER_HEIGHT,
  },
  heartContainer: {
    position: "absolute",
    right: 50,
    top: 6,
    height: HEADER_HEIGHT,
    width: HEADER_HEIGHT,
    justifyContent: "center",
    alignItems: "center",
  },
  dotsContainer: {
    position: "absolute",
    right: 9,
    top: 6,
    height: HEADER_HEIGHT,
    width: HEADER_HEIGHT,
    justifyContent: "center",
    alignItems: "center",
  },
})

export default PlaylistHeaderControl
```
src/common/components/PlaylistTitle.tsx```typescript
import React from "react"
import { StyleSheet, Text, View } from "react-native"
import { SafeAreaView } from "react-navigation"
import { colors } from "../theme"

const PlaylistTitle = ({ name }: { name: string | undefined }) => {
  return (
    <SafeAreaView style={[styles.container]}>
      <View style={styles.content}>
        <View
          style={{
            width: "54%",
          }}>
          <Text numberOfLines={1} style={[styles.title]}>
            {name}
          </Text>
        </View>
      </View>
    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    ...StyleSheet.absoluteFillObject,
    zIndex: -5,
  },
  content: {
    alignItems: "center",
    top: 16,
    justifyContent: "center",
    width: "100%",
  },
  title: {
    fontSize: 16,
    fontWeight: "bold",
    letterSpacing: 0.6,
    color: colors.white,
    textAlign: "center",
    zIndex: -5,
  },
})

export default PlaylistTitle
```
src/common/components/ShuffleButton.tsx```typescript
import React, { useRef } from "react"
import { StyleSheet, Text, TouchableOpacity } from "react-native"
import Animated from "react-native-reanimated"
import { colors, dimensions } from "../theme"
import { HEADER_HEIGHT } from "../components/PlaylistHeaderControl"
import UIHelper from "../helpers/UIHelper"

export const SHUFFLE_BUTTON_HEIGHT = 50
const TOP = 346

const OFFSET_TOP =
  (UIHelper.isIphoneX() ? HEADER_HEIGHT * 2 : HEADER_HEIGHT) *
    dimensions.ratio +
  20

const ShuffleButton = ({ offsetY }: { offsetY: Animated.Value<number> }) => {
  const translateY = useRef(
    offsetY.interpolate({
      inputRange: [0, 300],
      outputRange: [0, -350 + OFFSET_TOP],
      extrapolate: Animated.Extrapolate.CLAMP,
    }),
  ).current

  return (
    <Animated.View
      style={[styles.container, { transform: [{ translateY: translateY }] }]}>
      <TouchableOpacity style={styles.button}>
        <Text style={styles.btnText}>SHUFFLE PLAY</Text>
      </TouchableOpacity>
    </Animated.View>
  )
}

const styles = StyleSheet.create({
  container: {
    ...StyleSheet.absoluteFillObject,
    top: TOP,
    alignItems: "center",
    height: SHUFFLE_BUTTON_HEIGHT,
    zIndex: 1,
  },
  button: {
    width: 230,
    height: SHUFFLE_BUTTON_HEIGHT,
    backgroundColor: colors.green,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 32,
  },
  btnText: {
    color: colors.white,
    fontSize: 14,
    letterSpacing: 2,
    fontWeight: "bold",
  },
})

export default ShuffleButton
```
src/common/components/SpotifyButton.tsx```typescript
import React from "react"
import { StyleSheet, Text, TouchableOpacity } from "react-native"
import { colors } from "../theme"

const SpotifyButton = ({
  text,
  handlePress,
  color,
  textColor,
}: {
  text: string
  handlePress: () => void
  color?: string
  textColor?: string
}) => {
  return (
    <TouchableOpacity
      style={[styles.button, { backgroundColor: color || colors.white }]}
      onPress={handlePress}>
      <Text style={[styles.btnText, { color: textColor }]}>{text}</Text>
    </TouchableOpacity>
  )
}

const BUTTON_HEIGHT = 50

const styles = StyleSheet.create({
  button: {
    height: BUTTON_HEIGHT,
    justifyContent: "center",
    alignItems: "center",
    borderRadius: 32,
    paddingHorizontal: 38,
  },
  btnText: {
    fontSize: 14,
    letterSpacing: 2,
    fontWeight: "bold",
  },
})

export default SpotifyButton
```
src/common/components/TopBar.tsx```typescript
import React, { ReactNode } from "react"
import { Text, View } from "react-native"
import { colors } from "../theme"

const TopBar = ({
  title,
  children,
}: {
  title: string
  children?: ReactNode
}) => {
  return (
    <View
      style={{
        top: 0,
        height: 56,
        width: "100%",
        backgroundColor: colors.tabBar,
        justifyContent: "center",
      }}>
      <Text
        style={{
          color: "white",
          alignSelf: "center",
          fontSize: 16,
          fontWeight: "bold",
        }}>
        {title}
      </Text>
      {children}
    </View>
  )
}

export default TopBar
```
src/common/components/Track.tsx```typescript
import React from "react"
import { View, Text, StyleSheet } from "react-native"
import { colors } from "../theme"
import DotsView from "./DotsView"

const Track = ({ title, artist }: { title: string; artist: string }) => (
  <View style={styles.container}>
    <View style={styles.trackContainer}>
      <Text style={styles.title} numberOfLines={1}>
        {title}
      </Text>
      <Text style={styles.artist}>{artist}</Text>
    </View>
    <DotsView containerStyle={{ marginRight: 10 }} />
  </View>
)

const styles = StyleSheet.create({
  container: {
    flexDirection: "row",
    alignItems: "center",
    marginVertical: 12.5,
  },
  trackContainer: {
    flex: 1,
    flexDirection: "column",
  },
  title: {
    color: colors.white,
    fontSize: 16,
    letterSpacing: 0.6,
    marginRight: 15,
  },
  artist: { color: colors.grey, fontSize: 12.5, letterSpacing: 0.6 },
})

export default Track
```
